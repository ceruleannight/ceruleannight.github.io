
<!DOCTYPE html>
<html>
<head>
	<title>Chess</title>
	<meta charset="utf-8" />

	<script src="Scripts/ModalBox.js" type="text/javascript"></script>
	<script src="Scripts/PlayerPanel.js" type="text/javascript"></script>
	<script src="Scripts/GameMenu.js" type="text/javascript"></script>
	<script src="Scripts/PieceMoveChecks.js" type="text/javascript"></script>
	
	<script type="text/javascript">
	//********************************************
	var g_pieces=[];
	var g_facts;
	var g_drag=null;
	var g_boardHasHLite=false; // Board has highlighted cells at the moment
	var g_whoseTurn="lite";
	var g_userCtrlActive=true; // Set to true when the user is needs to make a move.  Off when user is not playing
	var g_winningFaction=null;
	var g_currentEnPassant=null;
	var g_pawnToPromote=null;
	var g_liteSide=null;
	var g_darkSide=null;
	var g_gameOver=false;
	var g_showCellIdx=false;
	var g_modalAllowsEsc=true;
	//********************************************
	function PageInit()
	{
		RenderMenu();
		ResetGame();
		InitTestCase();
	}
	//********************************************

	//********************************************
	function ResetGame()
	{
		g_pieces=[];
		g_facts=null;
		g_drag=null;
		g_boardHasHLite=false;
		g_whoseTurn="lite";
		g_winningFaction=null;
		g_currentEnPassant=null;
		g_pawnToPromote=null;
		g_liteSide=null;
		g_darkSide=null;
		g_gameOver=false;
		g_showCellIdx=false;
		g_modalAllowsEsc=true;

		InitFacts();
		WriteGrid();
		StoreAllOriginalCellBgColors();
		g_liteSide=new Faction("lite","White",-1)
		g_darkSide=new Faction("dark","Black",1)
		InitPieces();
		SetSpecialValues();

		DrawBothPlayerPanels();
		ComputerTurnCheck();
	}
	//********************************************
	function WriteGrid()
	{
		var gw=g_facts.gridSize;
		var gh=g_facts.gridSize;
		var cw=g_facts.cellSize;
		var ch=g_facts.cellSize;

		var html="";
		var rowStartClass="liteCell";
		
		for(var y=0; y<gw; y++)
		{
			var rowClass=rowStartClass;
			for(var x=0; x<gh; x++)
			{
				
				var i=x+y*gw;
				
				html+=WriteCell(i,x*cw,y*ch,cw,ch,"cell "+rowClass);

				if(rowClass=="liteCell"){rowClass="darkCell";}
				else{rowClass="liteCell";}
			}

			if(rowStartClass=="liteCell"){rowStartClass="darkCell";}
			else{rowStartClass="liteCell";}
		}
		
		document.getElementById("boardDiv").innerHTML=html;
	}
	//********************************************
	function WriteCell(idx,x,y,w,h,cssClass)
	{
		return "<div id=\"cell-"+idx+"\" class=\""+cssClass+"\""+
			" style=\"position:absolute; left:"+x+"px; top:"+y+"px; width:"+w+"px; height:"+h+"px;\""+
			//" onclick=\"Cc("+idx+")\""+
			//" onmousedown=\"CellMouseDown("+idx+");\""+
			//" onmouseover=\"CellMouseOver("+idx+");\""+
			" ondragover=\"CheckAllowPieceDropOnSpace(event,"+idx+")\""+
			" ondrop=\"DropPieceOnSpace(event,"+idx+")\""+
			">"+(g_showCellIdx?idx:"")+"</div>";
	}
	//********************************************
	function StoreAllOriginalCellBgColors()
	{
		var cellCount=g_facts.gridSize*g_facts.gridSize;
		for(var i=0; i<cellCount; i++)
		{
			var cellDiv=document.getElementById("cell-"+i);
			cellDiv["storedBgColor"]=cellDiv.style.backgroundColor;
		}
	}
	//********************************************
	function HighlightCell(idx,bgColor)
	{
		var cellDiv=document.getElementById("cell-"+idx);
		//cellDiv["storedBgColor"]=cellDiv.style.backgroundColor;
		cellDiv.style.backgroundColor="#"+bgColor;
		g_boardHasHLite=true;
	}
	//********************************************
	function RemoveAllHighlight()
	{
		var cellCount=g_facts.gridSize*g_facts.gridSize;
		for(var i=0; i<cellCount; i++)
		{
			RestoreOriginalCellBg(i);
		}
	}
	//********************************************
	function RestoreOriginalCellBg(idx)
	{
		var cellDiv=document.getElementById("cell-"+idx);
		cellDiv.style.backgroundColor=cellDiv["storedBgColor"];
	}
	//********************************************
	// Checks to see if the board needs to be cleared of highlighting
	// and if so it does so.
	function CheckClearBoard()
	{
		if(!g_boardHasHLite){return;}
		RemoveAllHighlight();
		g_boardHasHLite=false; // Turn off flag
	}
	//********************************************

	//********************************************
	function InitFacts()
	{
		g_facts=
		{
			"cellSize":80,
			"gridSize":8,
			"maxCoordVal":7,
			"moveHLitColor":"90FF90",
			"captureHLitColor":"FFA0A0",
			"promoteY_lite":0,
			"promoteY_dark":7
		};
	}
	//********************************************
	function Faction(sideKey,title,vertMult)
	{
		this.sideKey=sideKey;
		this.title=title;
		this.vertMult=vertMult;
		this.isInCheck=false;
		this.kingIdx=-1;
		this.leftRookIdx=-1;  // Needed for castling
		this.rightRookIdx=-1; // ""
		return this;
	}
	//********************************************
	function SetSpecialValues()
	{
		g_liteSide.kingIdx=GetKing("lite").idx;
		g_darkSide.kingIdx=GetKing("dark").idx;
		g_liteSide.leftRookIdx=16;
		g_liteSide.rightRookIdx=23;
		g_darkSide.leftRookIdx=0;
		g_darkSide.rightRookIdx=7;
	}
	//********************************************
	
	//********************************************
	function InitPieces()
	{
		g_pieces=[];
		g_pieces.push(new Piece(0,"dark",g_darkSide,"Rook",0,0));
		g_pieces.push(new Piece(1,"dark",g_darkSide,"Knight",1,0));
		g_pieces.push(new Piece(2,"dark",g_darkSide,"Bishop",2,0));
		g_pieces.push(new Piece(3,"dark",g_darkSide,"Queen",3,0));
		g_pieces.push(new Piece(4,"dark",g_darkSide,"King",4,0));
		g_pieces.push(new Piece(5,"dark",g_darkSide,"Bishop",5,0));
		g_pieces.push(new Piece(6,"dark",g_darkSide,"Knight",6,0));
		g_pieces.push(new Piece(7,"dark",g_darkSide,"Rook",7,0));

		g_pieces.push(new Piece(8,"dark",g_darkSide,"Pawn",0,1));
		g_pieces.push(new Piece(9,"dark",g_darkSide,"Pawn",1,1));
		g_pieces.push(new Piece(10,"dark",g_darkSide,"Pawn",2,1));
		g_pieces.push(new Piece(11,"dark",g_darkSide,"Pawn",3,1));
		g_pieces.push(new Piece(12,"dark",g_darkSide,"Pawn",4,1));
		g_pieces.push(new Piece(13,"dark",g_darkSide,"Pawn",5,1));
		g_pieces.push(new Piece(14,"dark",g_darkSide,"Pawn",6,1));
		g_pieces.push(new Piece(15,"dark",g_darkSide,"Pawn",7,1));

		g_pieces.push(new Piece(16,"lite",g_liteSide,"Rook",0,7));
		g_pieces.push(new Piece(17,"lite",g_liteSide,"Knight",1,7));
		g_pieces.push(new Piece(18,"lite",g_liteSide,"Bishop",2,7));
		g_pieces.push(new Piece(19,"lite",g_liteSide,"Queen",3,7));
		g_pieces.push(new Piece(20,"lite",g_liteSide,"King",4,7));
		g_pieces.push(new Piece(21,"lite",g_liteSide,"Bishop",5,7));
		g_pieces.push(new Piece(22,"lite",g_liteSide,"Knight",6,7));
		g_pieces.push(new Piece(23,"lite",g_liteSide,"Rook",7,7));

		g_pieces.push(new Piece(24,"lite",g_liteSide,"Pawn",0,6));
		g_pieces.push(new Piece(25,"lite",g_liteSide,"Pawn",1,6));
		g_pieces.push(new Piece(26,"lite",g_liteSide,"Pawn",2,6));
		g_pieces.push(new Piece(27,"lite",g_liteSide,"Pawn",3,6));
		g_pieces.push(new Piece(28,"lite",g_liteSide,"Pawn",4,6));
		g_pieces.push(new Piece(29,"lite",g_liteSide,"Pawn",5,6));
		g_pieces.push(new Piece(30,"lite",g_liteSide,"Pawn",6,6));
		g_pieces.push(new Piece(31,"lite",g_liteSide,"Pawn",7,6));

		var html="";
		for(var i=0; i<g_pieces.length; i++)
		{
			var piece=g_pieces[i];
			html+=WritePieceImg(i,piece.imgSrc);
		}
		document.getElementById("piecesDiv").innerHTML=html;

		// Set images
		for(var i=0; i<g_pieces.length; i++)
		{
			var piece=g_pieces[i];
			piece.img=document.getElementById("pieceImg-"+i);

			piece.Move(piece.x,piece.y);
		}
	}
	//********************************************
	function Piece(pieceIdx,sideKey,faction,type,x,y)
	{
		this.idx=pieceIdx;
		this.sideKey=sideKey;
		this.faction=faction;
		this.type=type;
		this.isCaptured=false;
		this.x=x;
		this.y=y;
		this.hasMoved=false;
		this.img;
		this.imgSrc="imgs/"+this.type+"_"+this.sideKey+".gif";

		//---------------------------------------
		this.PromoteTo=function(type)
		{
			this.type=type;
			this.imgSrc="imgs/"+type+"_"+this.sideKey+".gif";
			this.img.src=this.imgSrc;
		}
		//---------------------------------------
		this.InitImgObj=function()
		{
			this.img=document.getElementById("pieceImg-"+this.idx);
		}
		//---------------------------------------
		this.Move=function(gridX,gridY)
		{
			if(!this.img){return;}
			if(gridX<0 || gridX>=g_facts.gridSize || gridY<0 || gridY>=g_facts.gridSize){return;}

			var x=gridX*g_facts.cellSize+15;
			var y=gridY*g_facts.cellSize+11;
			this.img.style.left=x+"px";
			this.img.style.top=y+"px";

			this.x=gridX;
			this.y=gridY;
		}
		//---------------------------------------
		this.SetToCaptured=function()
		{
			this.isCaptured=true;
			this.x=-1;
			this.y=-1;
			this.img.style.display="none";
			DrawBothPlayerPanels();
		}
		//---------------------------------------

		return this;
	}
	//********************************************
	function WritePieceImg(idx,src)
	{
		return "<img id=\"pieceImg-"+idx+"\" src=\""+src+"\" style=\"position:absolute; left:0px; top:0px;\""+
			" draggable=\"true\""+
			" ondragstart=\"StartPieceDrag(event,"+idx+")\""+
			" ondragover=\"CheckAllowPieceDropOnPiece(event,"+idx+")\""+
			" ondrop=\"DropPieceOnPiece(event,"+idx+")\""+
			" onmouseover=\"HighlightAllowedMoves("+idx+")\""+
			" onmouseout=\"RemoveAllHighlight()\""+
			"/>";
	}
	//********************************************
	function MovePiece(pieceIdx,cellIdx)
	{
		cellIdx=parseInt(""+cellIdx,10); // Ensure int
		var pos=new IdxToXy(cellIdx);

		var piece=g_pieces[pieceIdx];
		if(piece.x==pos.x && piece.y==pos.y){return;} // Dropped where it already is
		piece.Move(pos.x,pos.y);
		piece.hasMoved=true;
	}
	//********************************************
	function SwitchTurn()
	{
		g_whoseTurn=GetOtherSide(g_whoseTurn);
		DrawBothPlayerPanels();

		var faction=GetCurrentFaction();
		if(DoAllMovesResultInCheck(faction))
		{
			g_gameOver=true;
			var key="STALE-MATE";
			if(faction.isInCheck)
			{
				g_winningFaction=GetOtherFaction();
				key="CHECK-MATE";
			}
			DrawBothPlayerPanels();
			setTimeout("ShowEndGameMessage('"+key+"')",300);
		}
	}
	//********************************************
	// Set wether or not the player should be in control.
	function SetUserControlState()
	{
		if(g_whoseTurn=="dark")
		{
			if(document.getElementById("compRunsBlackCb").checked){g_userCtrlActive=false;}
			else{g_userCtrlActive=true;}
		}
		if(g_whoseTurn=="lite")
		{
			if(document.getElementById("compRunsWhiteCb").checked){g_userCtrlActive=false;}
			else{g_userCtrlActive=true;}
		}
	}
	//********************************************
	function ShowEndGameMessage(key)
	{
		if(key=="CHECK-MATE")
		{
			g_modalAllowsEsc=true;
			InitOkModalBox("CHECKMATE!!!<br /><br />"+g_winningFaction.title+" wins!",400,"FFD060");
		}
		if(key=="STALE-MATE")
		{
			g_modalAllowsEsc=true;
			InitOkModalBox("STALEMATE! - Neither side wins.<br /><br />",400,"FFD060");
		}
		
		WriteGameOverMsg();
	}
	//********************************************
	function GetCurrentFaction(){if(g_whoseTurn=="lite"){return g_liteSide;}return g_darkSide;}
	function GetOtherFaction(){if(g_whoseTurn=="lite"){return g_darkSide;}return g_liteSide;}
	function GetOtherSide(sideKey){if(sideKey=="lite"){return "dark";}return "lite";}
	//********************************************

	//********************************************
	function StartPieceDrag(evt,pieceIdx)
	{
		CheckClearBoard();
		if(g_gameOver || !g_userCtrlActive){return;}

		var piece=g_pieces[pieceIdx];
		if(piece.sideKey!=g_whoseTurn){return;} // Not their turn

		g_drag=new PieceDrag(pieceIdx);
		evt.dataTransfer.setData("text",pieceIdx);
	}
	//********************************************
	function CheckAllowPieceDropOnSpace(evt,cellIdx)
	{
		if(!g_drag){return;}
		var cell=g_drag.CheckForPlace(cellIdx);
		if(!cell){return;}
		evt.preventDefault();
	}
	//********************************************
	function CheckAllowPieceDropOnPiece(evt,pieceIdx)
	{
		if(!g_drag){return;}
		if(g_drag.pieceIdx==pieceIdx){return;} // Disallow drop onto self
		var piece=g_pieces[pieceIdx];
		if(piece.sideKey==g_whoseTurn){return;} // Disallow drop onto a piece on this same side
		var cellIdx=XyToIdx(piece.x,piece.y);
		CheckAllowPieceDropOnSpace(evt,cellIdx);
	}
	//********************************************
	function DropPieceOnSpace(evt,cellIdx)
	{
		evt.preventDefault();
		var pieceIdx=evt.dataTransfer.getData("text");

		var cell=g_drag.CheckForPlace(cellIdx);
		if(!cell){return;}

		var pieceToCapture=null;
		if(cell.capture)
		{
			// Check for en passant capture
			if(g_currentEnPassant && g_currentEnPassant.cellIdx==cellIdx)
			{
				pieceToCapture=g_pieces[g_currentEnPassant.pieceIdx];
				
			}
			else{pieceToCapture=cell.piece;}
		}

		if(WillLeaveInCheck(pieceIdx,cellIdx,pieceToCapture))
		{
			g_modalAllowsEsc=true;
			InitOkModalBox("Move not allowed.<br /><br />This move would leave your king in check!",400,"FFD060");
			return;
		}

		// If this point is reached then the current faction must not be in check.
		GetCurrentFaction().isInCheck=false;

		if(pieceToCapture)
		{
			pieceToCapture.SetToCaptured();
		}
		
		CheckForEnPassantInit(pieceIdx,cellIdx); // (Must be called before the actual move)
		MovePiece(pieceIdx,cellIdx);

		// If it is a castling move then move the Rook also.
		var cr=cell.castlingRange;
		if(cr && cr.castleAllowed)
		{
			MovePiece(cr.rookPiece.idx,cr.p1.cellIdx);
		}

		if(CheckForPawnPromotion(pieceIdx,cellIdx)){aler(1);return;} // Move will be completed by the pawn promotion code
		FinishMove();
	}
	//********************************************
	function FinishMove()
	{
		CheckSetCheck();

		g_drag=null;
		SwitchTurn();
	}
	//********************************************
	function DropPieceOnPiece(evt,pieceIdx)
	{
		if(!g_drag){return;}
		if(g_drag.pieceIdx==pieceIdx){return;} // Disallow drop onto self
		var piece=g_pieces[pieceIdx];
		if(piece.sideKey==g_whoseTurn){return;} // Disallow drop onto a piece on this same side
		var cellIdx=XyToIdx(piece.x,piece.y);
		DropPieceOnSpace(evt,cellIdx);
	}
	//********************************************

	//********************************************
	// An object holding information about a move when a piece is being dragged.
	function PieceDrag(pieceIdx)
	{
		this.pieceIdx=pieceIdx;
		this.piece=g_pieces[pieceIdx];
		this.moveArray=GetMoveInfoArray(this.piece);

		//----------------------------------------------
		this.CheckForPlace=function(cellIdx)
		{
			for(var i=0; i<this.moveArray.length; i++)
			{
				var cell=this.moveArray[i];
				if(cell.cellIdx==cellIdx){return cell;}
			}
			return null;
		}
		//----------------------------------------------

		return this;
	}
	//********************************************

	//********************************************
	// Keeps calling itself to check to see if the computer should take a turn.
	function ComputerTurnCheck()
	{
		SetUserControlState();
		if(!g_userCtrlActive)
		{
			// TODO: computet takes turn
			//alert("Computer's turn");
		}

		setTimeout("ComputerTurnCheck()",1000);
	}
	//********************************************
	function KeyDown(evt)
	{
		evt=evt||window.event;
		if(evt.keyCode==27)
		{
			if(g_modalAllowsEsc){HideModal();}
			ShowMenu(false);
		}
		return true;
	}
	//********************************************

	//********************************************
	function InitTestCase()
	{
		return;
		//g_modalAllowsEsc=true;
		//InitOkModalBox("NOOOOOOOOOooooooo!",400,"FFD060");
		//SelectPawnPromotionPiece(g_whoseTurn);
		
		// Setup for pawn promotion
		g_pieces[2].SetToCaptured();
		//g_pieces[3].SetToCaptured();
		g_pieces[10].SetToCaptured();
		g_pieces[24].Move(2,1);
		DrawBothPlayerPanels();
	}
	//********************************************
	</script>

	<link href="Scripts/Modal.css" rel="stylesheet" type="text/css" />
	<style type="text/css">
	body{font-family:Verdana; font-size:12px;}
	.cell{border:solid 1px #606060; padding:0px; margin:0px; cursor:default;}
	.darkCell{background-color:#C0C0D0;}
	.liteCell{background-color:#FFFFFF;}
	.smallPieceImg.resize{max-width:50%; max-height:50%;}
	.captureCell{border:solid 1px #E0E0E0; padding:0px; margin:0px; background-color:#FFFFFF;}
	.playerPanelTbl th{background-color:#E0E0E0; text-align:center; font-size:16px; border-bottom:solid 1px #000000;}
	.playerTurnTag{background-color:#A0FFA0; font-weight:bold; text-align:center;}
	.playerInCheck{background-color:#FFA0A0; font-weight:bold; text-align:center;}
	.gameOverMsgTxt{background-color:#FFD0A0; font-size:16px; font-weight:bold; text-align:center; padding:10px;}
	</style>
</head>
<body onload="PageInit();" onkeydown="return KeyDown(event)">
	<div id="boardHostDiv" style="position:relative; left:10px; top:10px; width:800px;">
		<div id="boardDiv" style="position:absolute; left:0px; top:0px;"></div>
		<div id="piecesDiv" style="position:absolute; left:0px; top:0px;"></div>
	</div>
	<div id="player2PanelDiv" style="position:absolute; left:675px; top:18px;  height:155px; border:solid 1px #000000;"></div>
	<div id="gameOverPanelDiv" class="gameOverMsgTxt" style="position:absolute; left:700px; top:305px; display:none;"></div>
	<div id="player1PanelDiv" style="position:absolute; left:675px; top:498px; height:155px; border:solid 1px #000000;"></div>

	<div style="position:absolute; left:675px; top:185px;">
		<input id="compRunsBlackCb" type="checkbox" /><label for="compRunsBlackCb">Computer Controls Black</label>
	</div>
	<div style="position:absolute; left:675px; top:470px;">
		<input id="compRunsWhiteCb" type="checkbox" /><label for="compRunsWhiteCb">Computer Controls White</label>
	</div>

	<div id="menuBoxDiv" class="menuOverlay"></div>
	<div id="modalBoxDiv" class="modalOverlay"></div>
	
	<input type="button" value="Options" style="position:absolute; left:20px; top:670px;" onclick="ShowMenu(true);" />
</body>
</html>
